require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/menu_items", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # MenuItem. As you add validations to MenuItem, be sure to
  # adjust the attributes here as well.
  let(:menu) { create(:menu) }
  let(:valid_attributes) {
    {
      menu_id: menu.id,
      name: "Cheese Burguer",
      description: "Delicious cheese burguer",
      price: 9.99,
      category: "Main Course",
      dietary_restrictions: "None",
      ingredients: "Beef, Bread, Cheese, Lettuce, Tomato"
    }
  }

  let(:invalid_attributes) {
    {
      menu: nil,
      name: nil,
      description: "Delicious cheese burguer",
      price: nil,
      category: "Main Course",
      dietary_restrictions: "None",
      ingredients: "Beef, Bread, Cheese, Lettuce, Tomato"
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # MenuItemsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    context "when no menu item exist" do
      it "returns an empty array" do
        get api_v1_menu_items_url(menu), headers: valid_headers, as: :json
        expect(response).to be_successful
        expect(JSON.parse(response.body)).to be_empty
      end
    end

    context "when menu items exist" do
      it "renders a successful response" do
        menu = create(:menu)
        create_list(:menu_item, 3, menu: menu)

        get api_v1_menu_items_url(menu), headers: valid_headers, as: :json

        expect(response).to be_successful
        expect(JSON.parse(response.body).size).to eq(3)
      end
    end
  end

  describe "GET /show" do
    context "when the menu item does not exist" do
      it "returns a not found response (404)" do
        get api_v1_menu_item_url(menu, id: -1), as: :json
        expect(response).to have_http_status(:not_found)
      end
    end

    context "when menu exists" do
      it "returns a successful response" do
      menu_item = create(:menu_item, menu: menu)

      get api_v1_menu_item_url(menu, menu_item), as: :json

      expect(response).to be_successful
      end

      it "returns the menu item" do
        menu_item = create(:menu_item, menu: menu)

        get api_v1_menu_item_url(menu, menu_item), as: :json

        json = JSON.parse(response.body)

        expect(json["menu_id"]).to eq(menu.id)
        expect(json["id"]).to eq(menu_item.id)
        expect(json["name"]).to eq(menu_item.name)
        expect(json["description"]).to eq(menu_item.description)
        expect(json["category"]).to eq(menu_item.category)
        expect(json["price"]).to eq(menu_item.price.to_s)
        expect(json["dietary_restrictions"]).to eq(menu_item.dietary_restrictions)
        expect(json["ingredients"]).to eq(menu_item.ingredients)
      end
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new MenuItem" do
        expect {
          post api_v1_menu_items_url(menu),
               params: { menu_item: valid_attributes },
               headers: valid_headers,
               as: :json
        }.to change(MenuItem, :count).by(1)
      end

      it "renders a JSON response with the new menu_item" do
        post api_v1_menu_items_url(menu),
             params: { menu_item: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new MenuItem" do
        expect {
          post api_v1_menu_items_url(menu),
               params: { menu_item: invalid_attributes }, as: :json
        }.not_to change(MenuItem, :count)
      end

      it "renders a JSON response with errors for the new menu_item" do
        post api_v1_menu_items_url(menu),
             params: { menu_item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "returns error messages" do
        post api_v1_menu_items_url(menu),
             params: { menu_item: invalid_attributes }, headers: valid_headers, as: :json

        errors = JSON.parse(response.body)["errors"]

        expect(errors).not_to be_empty
        expect(errors).to have_key("menu")
        expect(errors["menu"]).to include("must exist")
        expect(errors).to have_key("name")
        expect(errors["name"]).to include("can't be blank")
        expect(errors).to have_key("price")
        expect(errors["price"]).to include("can't be blank")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_menu) { create(:menu) }
      let(:new_attributes) {
        {
          menu_id: new_menu.id,
          name: "Updated Menu Item",
          price: 12.99,
          description: "Updated description",
          category: "Updated Category",
          dietary_restrictions: "Updated Dietary Restrictions",
          ingredients: "Updated Beef, Updated Bread, Updated Cheese"
        }
      }

      it "updates the requested menu_item" do
        menu_item = create(:menu_item, menu: menu)

        patch api_v1_menu_item_url(menu, menu_item),
              params: { menu_item: new_attributes },
              headers: valid_headers,
              as: :json
        menu_item.reload

        expect(menu_item.menu_id).to eq(new_menu.id)
        expect(menu_item.name).to eq("Updated Menu Item")
        expect(menu_item.price).to eq(12.99)
        expect(menu_item.description).to eq("Updated description")
        expect(menu_item.category).to eq("Updated Category")
        expect(menu_item.dietary_restrictions).to eq("Updated Dietary Restrictions")
        expect(menu_item.ingredients).to eq("Updated Beef, Updated Bread, Updated Cheese")
      end

      it "renders a JSON response with the menu_item" do
        menu_item = MenuItem.create! valid_attributes
        patch api_v1_menu_item_url(menu, menu_item),
              params: { menu_item: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the menu_item" do
        menu_item = MenuItem.create! valid_attributes
        patch api_v1_menu_item_url(menu, menu_item),
              params: { menu_item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested menu_item" do
      menu_item = create(:menu_item, menu: menu)
      expect {
        delete api_v1_menu_item_url(menu, menu_item), headers: valid_headers, as: :json
      }.to change(MenuItem, :count).by(-1)
      expect(MenuItem.find_by(id: menu_item.id)).to be_nil
    end
  end
end
