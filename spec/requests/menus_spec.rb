require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/menus", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Menu. As you add validations to Menu, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Breakfast Menu" }
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  describe "GET /index" do
    context "when no menus exist" do
      it "returns an empty array" do
        get menus_url
        expect(response).to be_successful
        expect(JSON.parse(response.body)).to be_empty
      end
    end

    context "when menus exist" do
      it "renders a successful response" do
        create_list(:menu, 3)
        get menus_url

        expect(response).to be_successful
        expect(JSON.parse(response.body).size).to eq(3)
      end

      context "with menu items" do
        it "renders a successful response with menu items" do
          menu = create(:menu)
          create_list(:menu_item, 2, menu: menu)
          create(
            :menu_item,
            menu: menu,
            name: "Special Item",
            price: 99.99,
          )
          get menus_url

          parsed_menu_list = JSON.parse(response.body)
          parsed_menu_items = parsed_menu_list.first["menu_items"]

          expect(response).to be_successful
          expect(parsed_menu_list.size).to eq(1)
          expect(parsed_menu_items.size).to eq(3)
          expect(parsed_menu_items.last["name"]).to eq("Special Item")
          expect(parsed_menu_items.last["price"]).to eq("99.99")
          expect(parsed_menu_items.last["menu_id"]).to eq(menu.id)
        end
      end
    end
  end

  describe "GET /show" do
    context "when menu does not exist" do
      it "returns not found (404)" do
        get menu_url(0)
        expect(response).to have_http_status(:not_found)
      end
    end

    context "when menu exists" do
      let(:menu) { create(:menu) }

      it "returns the menu" do
        get menu_url(menu)
        expect(response).to be_successful

        parsed_menu = JSON.parse(response.body)
        expect(parsed_menu["id"]).to eq(menu.id)
        expect(parsed_menu["name"]).to eq(menu.name)
      end

      context "with menu items" do
        it "renders a successful response with menu items" do
          menu = create(:menu)
          create_list(:menu_item, 2, menu: menu)
          create(
            :menu_item,
            menu: menu,
            name: "Special Item",
            price: 99.99,
          )
          get menu_url(menu)

          parsed_menu = JSON.parse(response.body)

          parsed_menu_items = parsed_menu["menu_items"]

          expect(response).to be_successful
          expect(parsed_menu).to be_an_instance_of(Hash)
          expect(parsed_menu_items.size).to eq(3)
          expect(parsed_menu_items.last["name"]).to eq("Special Item")
          expect(parsed_menu_items.last["price"]).to eq("99.99")
          expect(parsed_menu_items.last["menu_id"]).to eq(menu.id)
        end
      end
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Menu" do
        expect {
          post menus_url, params: { menu: valid_attributes }
        }.to change(Menu, :count).by(1)
      end

      it "returns created (201) status" do
        post menus_url, params: { menu: valid_attributes }
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Menu" do
        expect {
          post menus_url, params: { menu: invalid_attributes }
        }.not_to change(Menu, :count)
      end

      it "returns a response with unprocessable entity (422) status" do
        post menus_url, params: { menu: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "returns error messages" do
        post menus_url, params: { menu: invalid_attributes }

        errors = JSON.parse(response.body)["errors"]

        expect(errors).not_to be_empty
        expect(errors).to have_key("name")
        expect(errors["name"]).to include("can't be blank")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "Updated Menu" }
      }

      it "updates the requested menu" do
        menu = create(:menu, valid_attributes)
        patch menu_url(menu), params: { menu: new_attributes }
        menu.reload
        expect(menu.name).to eq("Updated Menu")
      end

      it "returns ok (200) status code" do
        menu = create(:menu, valid_attributes)
        patch menu_url(menu), params: { menu: new_attributes }
        expect(response).to have_http_status(:ok)
      end

      context "when the menu has associated menu items" do
        it "maintains the associated menu items" do
          menu = create(:menu, valid_attributes)
          menu_items = create_list(:menu_item, 3, menu: menu)

          patch menu_url(menu), params: { menu: new_attributes }
          menu.reload

          expect(menu.name).to eq("Updated Menu")
          expect(menu.menu_items.count).to eq(3)
          expect(menu.menu_items.pluck(:id)).to match_array(menu_items.pluck(:id))
        end
      end
    end

    context "with invalid parameters" do
      let(:invalid_attributes) { { name: "" } }

      it "does not update the requested menu" do
        menu = create(:menu, valid_attributes)
        original_name = menu.name
        patch menu_url(menu), params: { menu: invalid_attributes }
        menu.reload
        expect(menu.name).not_to eq("")
        expect(menu.name).to eq(original_name)
      end

      it "returns unprocessable_entity (422) status code" do
        menu = create(:menu, valid_attributes)
        patch menu_url(menu), params: { menu: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "returns error messages" do
        menu = create(:menu, valid_attributes)
        patch menu_url(menu), params: { menu: invalid_attributes }

        errors = JSON.parse(response.body)["errors"]

        expect(errors).not_to be_empty
        expect(errors).to have_key("name")
        expect(errors["name"]).to include("can't be blank")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested menu" do
      menu = create(:menu, valid_attributes)
      expect {
        delete menu_url(menu)
      }.to change(Menu, :count).by(-1)
      expect(Menu.find_by(id: menu.id)).to be_nil
    end
  end
end
